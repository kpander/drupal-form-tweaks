<?php
/**
 * @file
 * Provides configurable form tweaks by user role.
 */

define('FORM_TWEAKS_CONFIG', 'form_tweaks_config');


/**
 * Provides custom hook hook_form_tweaks_definitions().
 *
 * Provide the default form tweaks that can be made to common forms.
 * Other modules can provide this hook to supply their own tweakable form
 * settings.
 *
 * @return assoc array where 
 *   key    = a unique id to represent a specific form element to hide
 *   value  = an array of form keys which lead to the element to which we add
 *            the #access = FALSE value
 *
 *            If the array is an assoc array with the key 'css', the value will
 *            be css to add inline, rather than an addition of the #access
 *            key.
 */
function form_tweaks_form_tweaks_definitions() {
  return array(
    // Generic node edit form.
    'node_form' => array(
      'node-title'                  => array('title'),
      'node-button-preview'         => array('actions', 'preview'),

      'node-revisions-fieldset'     => array('revision_information'),
      'node-revisions-add-new'      => array('revision_information', 'revision'),
      'node-revisions-log-message'  => array('revision_information', 'log'),

      'node-options-fieldset'       => array('options'),
      'node-options-published'      => array('options', 'status'),
      'node-options-promote'        => array('options', 'promote'),
      'node-options-sticky'         => array('options', 'sticky'),

      'node-author-fieldset'        => array('author'),
      'node-author-by'              => array('author', 'name'),
      'node-author-date'            => array('author', 'date'),

      'node-path-fieldset'          => array('path'),

      'node-menu-fieldset'          => array('menu'),
      'node-menu-link-description'  => array('menu', 'link', 'description'),
      'node-menu-link-weight'       => array('menu', 'link', 'weight'),
      'node-menu-link-parent'       => array('menu', 'link', 'parent'),

      // The following options are hidden by using css. Sometimes this is a 
      // requirement, sometimes it's done so that settings can still be set
      // but the form components will be invisible.
      'node-input-filter-csshide'   => array('css' => ".filter-wrapper{display:none;}"),
      'node-edit-summary-csshide'   => array('css' => ".form-type-textarea .field-edit-link{display:none;}.text-summary-wrapper{display:none !important;}"),
      'node-menu-link-csshide'      => array('css' => ".form-item-menu-enabled{display:none;}"),
      'node-menu-title-csshide'     => array('css' => ".form-item-menu-link-title{display:none;}"),
      'node-menu-parent-csshide'     => array('css' => ".form-item-menu-parent{display:none;}"),

      'node-revisions-fieldset-csshide' => array('revision_information'),
      'node-options-fieldset-csshide'   => array('options'),
      'node-author-fieldset-csshide'    => array('author'),
      'node-path-fieldset-csshide'      => array('path'),
      'node-menu-fieldset-csshide'      => array('menu'),
    ),

    // File edit form.
    'file_entity_edit' => array(
      'file-filename'               => array('filename'),
      'file-preview'                => array('preview'),
      'file-save'                   => array('actions', 'submit'), 
      'file-delete'                 => array('actions', 'delete'), 
      'file-cancel'                 => array('actions', 'cancel'), 
    ),
  );
}



/**
 * Implements hook_module_implements_alter().
 *
 * We use this to place our hook_form_alter() *after* any other module's, so
 * we have access to pretty much everything. This is similar to changing the 
 * module weight in the {system} table, but without having to do it (or relying
 * on determining an arbitrarily 'good' weight).
 */
function form_tweaks_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $module = 'form_tweaks';
    if (isset($implementations[$module])) {
      $group = $implementations[$module];
      unset($implementations[$module]);
      $implementations[$module] = $group;
    }
  }
}


/**
 * Implements hook_form_alter().
 *
 * Process the form tweaks here. If we have form/role/element matches, hide the
 * affected form elements now.
 */
function form_tweaks_form_alter(&$form, &$form_state, $form_id) {
  static $defs = null;
  if (is_null($defs)) {
    $defs = module_invoke_all('form_tweaks_definitions');
  }

  if (isset($defs[$form_id])) {
    // Process this form if we have specific definitions for it.
    _form_tweaks_process_form($form, $defs[$form_id]);
  }

  // If this also happens to be a node form, process the common node form
  // settings as well.
  if (preg_match("/_node_form$/", $form_id)) {
    _form_tweaks_process_form($form, $defs['node_form']);
  }
}

/**
 * For a given form, with a given set of known field definitions, hide the
 * fields as defined by roles this user has.
 *
 * @param assoc array $form as provided by hook_form_alter()
 * @param assoc array $defs where:
 *   key    = A form element to hide, as defined in hook_form_tweaks_definitions()
 *            e.g., 'node-revisions-add-new'
 *   value  = An array of form keys indicating how to get to the element where
 *            we'll add the key ['#access'] = FALSE e.g., array('menu', 'link', 
 *            'parent').
 *
 *            Note that if the array contains a 'css' key, the value must be
 *            a css rule that will be applied inline, rather than adding the
 *            #access key to the form element.
 *
 *   e.g.,: array(
 *     'node-author-fieldset' => array('author'),
 *     'node-menu-link-weight' => array('menu', 'link', 'weight'),
 *     'node-menu-link-csshide' => array('css' => ".form-item-menu-enabled{display:none;}"),
 *   );
 */
function _form_tweaks_process_form(&$form, $defs) {
  $config = variable_get(FORM_TWEAKS_CONFIG, array());

  global $user;
  $role_names = array_values($user->roles);

  foreach ($config as $role => $items_to_hide) {
    if (in_array($role, $role_names) || $role == 'all') {
      _form_tweaks_process_form_hide_items($form, $defs, $items_to_hide);
    }
  }
}

/**
 * Hide the given items in the given form, with the definitions of *how* to
 * hide each item. The definitions may be either form element paths (to which
 * we append an #access = FALSE) or css rules (which we add inline).
 *
 * @param assoc array $form as provided by hook_form_alter()
 * @param assoc array $defs (passed by _form_tweaks_process_form())
 * @param array $items_to_hide the form items to hide, as defined in 
 *   hook_form_tweaks_definitions(). If an item is an array, the first element
 *   is the item to hide, the second element is the specific form_id where this
 *   element will be hidden on.
 *   
 *   e.g., array(
 *     'node-revisions-add-new',
 *     'node-options-sticky',
 *     array('node-menu-link-parent', 'news_node_form'),
 *  );
 *
 */
function _form_tweaks_process_form_hide_items(&$form, $defs, $items_to_hide) {
  $form_id = $form['form_id']['#value'];

  foreach ($items_to_hide as $item) {
    // Check if the item we're told to hide comes with a form id restriction.
    // This means the item should only be hidden if we're processing the
    // specified form name.
    if (is_array($item)) {
      $item_form_id = $item[1];
      $item = $item[0];

      if ($form_id != $item_form_id) {
        continue;
      }
    }

    // Ensure we have a definition for the field we've been told to hide.
    if (!isset($defs[$item])) {
      continue;
    }

    // There are three possible methods of hiding form items:
    // 1: by setting a field's #access value to FALSE (the default)
    // 2: by applying CSS to hide the element
    // 3: by wrapping display:none code around the element
    //
    // If the definition array has a 'css' key, we use the css method.
    // Otherwise we assume we're disabling #access to a form element.
    
    if (isset($defs[$item]['css'])) {
      // We're adding inline css to hide a form element.
      drupal_add_css($defs[$item]['css'], array('type' => 'inline'));
    }
    else if (isset($defs[$item]['wrap'])) {
    }
    else {
      // We're setting the #access property of a form element to FALSE.
      $key_exists = TRUE;
      $fields = $defs[$item];

      // We're going to add an '#access' => FALSE key to an element defined
      // by the field definition. This could be an arbitrary number of levels
      // deep within the form array. 
      //
      // To get to the target key in the form array, sequentially walk deeper 
      // using the keys given in the definition.
      $value = &$form;
      foreach ($fields as $field) {
        if (isset($value[$field])) {
          $value = &$value[$field];
        }
        else {
          // This configured key didn't exist in the form.
          $key_exists = FALSE;
          break;
        }
      }

      if ($key_exists) {
        if (preg_match("/-csshide$/", $item)) {
          // Wrap the element with css 'display:none', because we still need
          // to be able to set/change the element's value, but don't want the
          // user to be able to.
          $value['#prefix'] = '<div style="display:none;">' . (isset($value['prefix']) ? $value['#prefix'] : '');
          $value['#suffix'] = (isset($value['#suffix']) ? $value['#suffix'] : '') . '</div>';
        }
        else {
          // Disable access to the element.
          $value['#access'] = FALSE;
        }
      }
    }
  }
}

